name: Build MAUI WinUI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-winui:
    runs-on: windows-latest  # Required for WinUI builds

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug secrets presence
        shell: pwsh
        run: |
            $pfxCert = "${{ secrets.PFX_CERT_BASE64 }}"
            $pfxPass = "${{ secrets.PFX_CERT_PASSWORD }}"

            if ([string]::IsNullOrEmpty($pfxCert)) {
              Write-Error "PFX_CERT_BASE64 secret is missing!"
            } else {
              Write-Output "PFX_CERT_BASE64 is set (length: $($pfxCert.Length))"
            }

            if ([string]::IsNullOrEmpty($pfxPass)) {
              Write-Error "PFX_CERT_PASSWORD secret is missing!"
            } else {
              Write-Output "PFX_CERT_PASSWORD is set (length: $($pfxPass.Length))"
            }

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'  # Adjust to your project’s SDK
          cache: true
          cache-dependency-path: "**/packages.lock.json"


      - name: Ensure dotnet dirs exist
        run: |
         mkdir -p ~/.dotnet/packs
         mkdir -p ~/.dotnet/sdk-manifests
         mkdir -p ~/.dotnet/workloadinstallrecords

      - name: Cache .NET workloads
        id: cache-maui
        uses: actions/cache@v4
        with:
          path: |
            ~/.dotnet/packs
            ~/.dotnet/sdk-manifests
            ~/.dotnet/workloadinstallrecords
          key: ${{ runner.os }}-dotnet-maui-${{ hashFiles('**/*.csproj', '**/*.sln') }}
          restore-keys: |

      # Optional: restore workloads if MAUI isn’t fully present
      - name: Install MAUI workload
        if: steps.cache-maui.outputs.cache-hit != 'true'
        run: dotnet workload install maui --ignore-failed-sources

       # Ensure workloads are ready (restores packs if cache restored partially)
      - name: Restore workloads
        run: dotnet workload restore

      - name: Verify workloads
        run: dotnet workload list

    # Cache NuGet packages
      # - name: Cache NuGet packages
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.nuget/packages
      #     key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-nuget-

      - name: Restore dependencie.
        run: dotnet restore EDay2025GithubActions.sln --locked-mode --force-evaluate

      - name: Decode and import signing certificate
        shell: pwsh
        run: |
            $pfxPath = "$env:USERPROFILE\edays2025.pfx"
            [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String("${{ secrets.PFX_CERT_BASE64 }}"))
            Import-PfxCertificate -FilePath $pfxPath -Password (ConvertTo-SecureString -String "${{ secrets.PFX_CERT_PASSWORD }}" -AsPlainText -Force) -CertStoreLocation Cert:\CurrentUser\My

      - name: Build WinUI project
        run: dotnet build EDay2025GithubActions\EDay2025GithubActions.WinUI\EDay2025GithubActions.WinUI.csproj -c Release -f net9.0-windows10.0.19041.0

      - name: Run xUnit tests
        run: dotnet test EDay2025GithubActions\TestProject1\TestProject1.csproj -c Release --logger "trx;LogFileName=test_results.trx" --results-directory ./TestResults

      - name: Install trx2junit
        run: dotnet tool install -g trx2junit

      - name: Convert TRX to JUnit
        run: trx2junit ./TestResults/test_results.trx

      - name: Publish Test Report
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: xUnit Tests
          path: ./TestResults/*.xml
          reporter: java-junit


      - name: Publish WinUI project
        shell: pwsh
        run: |
          $projectName = "EDay2025GithubActions.WinUI"
          $rootFolderPath = "EDay2025GithubActions/EDay2025GithubActions.WinUI"
          $pubxmlPath = Resolve-Path (Join-Path $rootFolderPath "Properties/PublishProfiles/win-msix.pubxml")
          $projectFilePath = Join-Path $rootFolderPath "$projectName.csproj"

          dotnet publish $projectFilePath -p:PublishProfile=$pubxmlPath

      - name: Upload published artifact
        uses: actions/upload-artifact@v4
        with:
          name: WinUI-publish
          path: ${{ github.workspace }}/EDay2025GithubActions/EDay2025GithubActions.WinUI/bin/publish/net9.0-windows10.0.19041.0/win-x64/AppPackages